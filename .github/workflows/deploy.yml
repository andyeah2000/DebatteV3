name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  packages: read
  deployments: write

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      
    steps:
    - id: set-env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

  deploy:
    name: Deploy
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    
    concurrency: 
      group: deploy-${{ needs.prepare.outputs.environment }}
      cancel-in-progress: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_USERNAME }}/debattle:${{ github.sha }}
          ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_USERNAME }}/debattle:${{ needs.prepare.outputs.environment }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=${{ needs.prepare.outputs.environment }}
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets[format('{0}_SSH_KEY', needs.prepare.outputs.environment)] }}
        known_hosts: ${{ secrets[format('{0}_SSH_KNOWN_HOSTS', needs.prepare.outputs.environment)] }}
    
    - name: Deploy to environment
      env:
        DEPLOY_HOST: ${{ secrets[format('{0}_HOST', needs.prepare.outputs.environment)] }}
        DEPLOY_USER: ${{ secrets[format('{0}_USER', needs.prepare.outputs.environment)] }}
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      run: |
        # Create deployment directory
        ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/debattle/$ENVIRONMENT"
        
        # Copy configuration files
        scp docker-compose.yml nginx.conf $DEPLOY_USER@$DEPLOY_HOST:~/debattle/$ENVIRONMENT/
        
        # Copy environment file
        scp .env.$ENVIRONMENT $DEPLOY_USER@$DEPLOY_HOST:~/debattle/$ENVIRONMENT/.env
        
        # Deploy using docker-compose
        ssh $DEPLOY_USER@$DEPLOY_HOST "cd ~/debattle/$ENVIRONMENT && \
          docker-compose pull && \
          docker-compose up -d && \
          docker system prune -f"
    
    - name: Run Database Migrations
      env:
        DEPLOY_HOST: ${{ secrets[format('{0}_HOST', needs.prepare.outputs.environment)] }}
        DEPLOY_USER: ${{ secrets[format('{0}_USER', needs.prepare.outputs.environment)] }}
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      run: |
        ssh $DEPLOY_USER@$DEPLOY_HOST "cd ~/debattle/$ENVIRONMENT && \
          docker-compose exec -T app npm run migration:run"
    
    - name: Verify Deployment
      env:
        DEPLOY_HOST: ${{ secrets[format('{0}_HOST', needs.prepare.outputs.environment)] }}
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      run: |
        # Wait for service to be up
        timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://${{ env.DEPLOY_HOST }}/health)" != "200" ]]; do sleep 5; done' || false
        
        # Run basic health checks
        curl -f http://${{ env.DEPLOY_HOST }}/health
        curl -f http://${{ env.DEPLOY_HOST }}/metrics
    
    - name: Notify on Success
      if: success()
      uses: slackapi/slack-github-action@v1
      with:
        channel-id: ${{ secrets[format('{0}_SLACK_CHANNEL', needs.prepare.outputs.environment)] }}
        slack-message: "üöÄ Successfully deployed version ${{ github.sha }} to ${{ needs.prepare.outputs.environment }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets[format('{0}_SLACK_TOKEN', needs.prepare.outputs.environment)] }}
    
    - name: Notify on Failure
      if: failure()
      uses: slackapi/slack-github-action@v1
      with:
        channel-id: ${{ secrets[format('{0}_SLACK_CHANNEL', needs.prepare.outputs.environment)] }}
        slack-message: "‚ùå Failed to deploy version ${{ github.sha }} to ${{ needs.prepare.outputs.environment }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets[format('{0}_SLACK_TOKEN', needs.prepare.outputs.environment)] }}

  monitoring:
    name: Post-Deploy Monitoring
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    if: success()
    environment: ${{ needs.prepare.outputs.environment }}
    
    steps:
    - name: Monitor Application Health
      env:
        DEPLOY_HOST: ${{ secrets[format('{0}_HOST', needs.prepare.outputs.environment)] }}
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      run: |
        # Monitor for 5 minutes after deployment
        end=$((SECONDS+300))
        while [ $SECONDS -lt $end ]; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.DEPLOY_HOST }}/health)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status $response"
            exit 1
          fi
          sleep 30
        done
    
    - name: Check Error Rates
      env:
        DEPLOY_HOST: ${{ secrets[format('{0}_HOST', needs.prepare.outputs.environment)] }}
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      run: |
        # Get error rates from metrics endpoint
        error_rate=$(curl -s http://${{ env.DEPLOY_HOST }}/metrics | grep http_requests_total | grep "status=\"5" | awk '{sum+=$2} END {print sum}')
        if [ "$error_rate" -gt "10" ]; then
          echo "Error rate too high: $error_rate errors in last 5 minutes"
          exit 1
        fi
    
    - name: Notify on Monitoring Issues
      if: failure()
      uses: slackapi/slack-github-action@v1
      with:
        channel-id: ${{ secrets[format('{0}_SLACK_CHANNEL', needs.prepare.outputs.environment)] }}
        slack-message: "‚ö†Ô∏è Post-deployment monitoring detected issues in ${{ needs.prepare.outputs.environment }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets[format('{0}_SLACK_TOKEN', needs.prepare.outputs.environment)] }} 